/*
 * MDES Digital Enablement API
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.mdes_digital_enablement_client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mastercard.developer.mdes_digital_enablement_client.model.ProductConfig;
import com.mastercard.developer.mdes_digital_enablement_client.model.TokenInfoForNTUAndGetToken;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TokenForNTU
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-06-24T14:19:40.105+01:00[Europe/London]")
public class TokenForNTU {
  public static final String SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE = "tokenUniqueReference";
  @SerializedName(SERIALIZED_NAME_TOKEN_UNIQUE_REFERENCE)
  private String tokenUniqueReference;

  public static final String SERIALIZED_NAME_TOKEN_REQUESTOR_ID = "tokenRequestorId";
  @SerializedName(SERIALIZED_NAME_TOKEN_REQUESTOR_ID)
  private String tokenRequestorId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_EVENT_REASON_CODE = "eventReasonCode";
  @SerializedName(SERIALIZED_NAME_EVENT_REASON_CODE)
  private String eventReasonCode;

  public static final String SERIALIZED_NAME_SUSPENDED_BY = "suspendedBy";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_BY)
  private List<String> suspendedBy = null;

  public static final String SERIALIZED_NAME_STATUS_TIMESTAMP = "statusTimestamp";
  @SerializedName(SERIALIZED_NAME_STATUS_TIMESTAMP)
  private String statusTimestamp;

  public static final String SERIALIZED_NAME_PRODUCT_CONFIG = "productConfig";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CONFIG)
  private ProductConfig productConfig;

  public static final String SERIALIZED_NAME_TOKEN_INFO = "tokenInfo";
  @SerializedName(SERIALIZED_NAME_TOKEN_INFO)
  private TokenInfoForNTUAndGetToken tokenInfo;


  public TokenForNTU tokenUniqueReference(String tokenUniqueReference) {
    
    this.tokenUniqueReference = tokenUniqueReference;
    return this;
  }

   /**
   * The unique reference allocated to the Token which is always present even if an error occurs. &lt;br&gt; maxLength: 64 
   * @return tokenUniqueReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DWSPMC000000000132d72d4fcb2f4136a0532d3093ff1a45", value = "The unique reference allocated to the Token which is always present even if an error occurs. <br> maxLength: 64 ")

  public String getTokenUniqueReference() {
    return tokenUniqueReference;
  }


  public void setTokenUniqueReference(String tokenUniqueReference) {
    this.tokenUniqueReference = tokenUniqueReference;
  }


  public TokenForNTU tokenRequestorId(String tokenRequestorId) {
    
    this.tokenRequestorId = tokenRequestorId;
    return this;
  }

   /**
   * Identifies the Token Requestor. &lt;br&gt; minLength: 11 maxLength: 11 
   * @return tokenRequestorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "98765432101", value = "Identifies the Token Requestor. <br> minLength: 11 maxLength: 11 ")

  public String getTokenRequestorId() {
    return tokenRequestorId;
  }


  public void setTokenRequestorId(String tokenRequestorId) {
    this.tokenRequestorId = tokenRequestorId;
  }


  public TokenForNTU status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The current status of Token. Must be either: * &#39;INACTIVE&#39; (Token has not yet been activated) * &#39;ACTIVE&#39; (Token is active and ready to transact) * &#39;SUSPENDED&#39; (Token is suspended and unable to transact) * &#39;DEACTIVATED&#39; (Token has been permanently deactivated).&lt;br&gt; maxLength: 32 
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SUSPENDED", value = "The current status of Token. Must be either: * 'INACTIVE' (Token has not yet been activated) * 'ACTIVE' (Token is active and ready to transact) * 'SUSPENDED' (Token is suspended and unable to transact) * 'DEACTIVATED' (Token has been permanently deactivated).<br> maxLength: 32 ")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public TokenForNTU eventReasonCode(String eventReasonCode) {
    
    this.eventReasonCode = eventReasonCode;
    return this;
  }

   /**
   * An optional Reason Code provided by the Issuer to explain why the token status has changed. Not present if the Issuer has not supplied a reason code. Note: Recommended that Partners be resilient to new values as new reason codes may be added in the future without notice. * &#39;DEVICE_LOST&#39; - Cardholder confirmed token device lost. * &#39;DEVICE_STOLEN&#39; - Cardholder confirmed token device stolen. * &#39;SUSPECTED_FRAUD&#39; -  Issuer or cardholder reported fraudulent token transactions. * &#39;ACCOUNT_CLOSED&#39; - Account closed. * &#39;NOT_FRAUD&#39; - Issuer or cardholder confirmed no fraudulent token transactions. * &#39;DEVICE_FOUND&#39; - Cardholder reported token device found or not stolen. * &#39;REDIGITIZATION_COMPLETE&#39; - Token has been re-digitized successfully with either the expiry date extended or both expiry and token number changed. * &#39;OTHER&#39; -  Other. &lt;br&gt; maxLength: 32 
   * @return eventReasonCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SUSPECTED_FRAUD", value = "An optional Reason Code provided by the Issuer to explain why the token status has changed. Not present if the Issuer has not supplied a reason code. Note: Recommended that Partners be resilient to new values as new reason codes may be added in the future without notice. * 'DEVICE_LOST' - Cardholder confirmed token device lost. * 'DEVICE_STOLEN' - Cardholder confirmed token device stolen. * 'SUSPECTED_FRAUD' -  Issuer or cardholder reported fraudulent token transactions. * 'ACCOUNT_CLOSED' - Account closed. * 'NOT_FRAUD' - Issuer or cardholder confirmed no fraudulent token transactions. * 'DEVICE_FOUND' - Cardholder reported token device found or not stolen. * 'REDIGITIZATION_COMPLETE' - Token has been re-digitized successfully with either the expiry date extended or both expiry and token number changed. * 'OTHER' -  Other. <br> maxLength: 32 ")

  public String getEventReasonCode() {
    return eventReasonCode;
  }


  public void setEventReasonCode(String eventReasonCode) {
    this.eventReasonCode = eventReasonCode;
  }


  public TokenForNTU suspendedBy(List<String> suspendedBy) {
    
    this.suspendedBy = suspendedBy;
    return this;
  }

  public TokenForNTU addSuspendedByItem(String suspendedByItem) {
    if (this.suspendedBy == null) {
      this.suspendedBy = new ArrayList<String>();
    }
    this.suspendedBy.add(suspendedByItem);
    return this;
  }

   /**
   * (CONDITIONAL only supplied if status is SUSPENDED) Who or what caused the Token to be suspended One or more values of:   * ISSUER - Suspended by the Issuer.   * TOKEN_REQUESTOR - Suspended by the Token Requestor   * MOBILE_PIN_LOCKED - Suspended due to the Mobile PIN being locked   * CARDHOLDER - Suspended by the Cardholder &lt;br&gt; 
   * @return suspendedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(CONDITIONAL only supplied if status is SUSPENDED) Who or what caused the Token to be suspended One or more values of:   * ISSUER - Suspended by the Issuer.   * TOKEN_REQUESTOR - Suspended by the Token Requestor   * MOBILE_PIN_LOCKED - Suspended due to the Mobile PIN being locked   * CARDHOLDER - Suspended by the Cardholder <br> ")

  public List<String> getSuspendedBy() {
    return suspendedBy;
  }


  public void setSuspendedBy(List<String> suspendedBy) {
    this.suspendedBy = suspendedBy;
  }


  public TokenForNTU statusTimestamp(String statusTimestamp) {
    
    this.statusTimestamp = statusTimestamp;
    return this;
  }

   /**
   * The date and time the token status was last updated. Expressed in ISO 8601 extended format as one of the following:   * YYYY-MM-DDThh:mm:ss[.sss]Z   * YYYY-MM-DDThh:mm:ss[.sss]±hh:mm   * Where [.sss] is optional and can be 1 to 3 digits. &lt;br&gt; 
   * @return statusTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date and time the token status was last updated. Expressed in ISO 8601 extended format as one of the following:   * YYYY-MM-DDThh:mm:ss[.sss]Z   * YYYY-MM-DDThh:mm:ss[.sss]±hh:mm   * Where [.sss] is optional and can be 1 to 3 digits. <br> ")

  public String getStatusTimestamp() {
    return statusTimestamp;
  }


  public void setStatusTimestamp(String statusTimestamp) {
    this.statusTimestamp = statusTimestamp;
  }


  public TokenForNTU productConfig(ProductConfig productConfig) {
    
    this.productConfig = productConfig;
    return this;
  }

   /**
   * Get productConfig
   * @return productConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProductConfig getProductConfig() {
    return productConfig;
  }


  public void setProductConfig(ProductConfig productConfig) {
    this.productConfig = productConfig;
  }


  public TokenForNTU tokenInfo(TokenInfoForNTUAndGetToken tokenInfo) {
    
    this.tokenInfo = tokenInfo;
    return this;
  }

   /**
   * Get tokenInfo
   * @return tokenInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TokenInfoForNTUAndGetToken getTokenInfo() {
    return tokenInfo;
  }


  public void setTokenInfo(TokenInfoForNTUAndGetToken tokenInfo) {
    this.tokenInfo = tokenInfo;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenForNTU tokenForNTU = (TokenForNTU) o;
    return Objects.equals(this.tokenUniqueReference, tokenForNTU.tokenUniqueReference) &&
        Objects.equals(this.tokenRequestorId, tokenForNTU.tokenRequestorId) &&
        Objects.equals(this.status, tokenForNTU.status) &&
        Objects.equals(this.eventReasonCode, tokenForNTU.eventReasonCode) &&
        Objects.equals(this.suspendedBy, tokenForNTU.suspendedBy) &&
        Objects.equals(this.statusTimestamp, tokenForNTU.statusTimestamp) &&
        Objects.equals(this.productConfig, tokenForNTU.productConfig) &&
        Objects.equals(this.tokenInfo, tokenForNTU.tokenInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenUniqueReference, tokenRequestorId, status, eventReasonCode, suspendedBy, statusTimestamp, productConfig, tokenInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenForNTU {\n");
    sb.append("    tokenUniqueReference: ").append(toIndentedString(tokenUniqueReference)).append("\n");
    sb.append("    tokenRequestorId: ").append(toIndentedString(tokenRequestorId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    eventReasonCode: ").append(toIndentedString(eventReasonCode)).append("\n");
    sb.append("    suspendedBy: ").append(toIndentedString(suspendedBy)).append("\n");
    sb.append("    statusTimestamp: ").append(toIndentedString(statusTimestamp)).append("\n");
    sb.append("    productConfig: ").append(toIndentedString(productConfig)).append("\n");
    sb.append("    tokenInfo: ").append(toIndentedString(tokenInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

