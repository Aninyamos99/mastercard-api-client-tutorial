<?php
/**
 * ProductConfig
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  DigitalEnablementClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MDES Digital Enablement API
 *
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java)
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalEnablementClient\Model;

use \ArrayAccess;
use \DigitalEnablementClient\ObjectSerializer;

/**
 * ProductConfig Class Doc Comment
 *
 * @category Class
 * @package  DigitalEnablementClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ProductConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'productConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brand_logo_asset_id' => 'string',
        'issuer_logo_asset_id' => 'string',
        'is_co_branded' => 'bool',
        'co_brand_name' => 'string',
        'co_brand_logo_asset_id' => 'string',
        'card_background_combined_asset_id' => 'string',
        'card_background_asset_id' => 'string',
        'icon_asset_id' => 'string',
        'foreground_color' => 'string',
        'issuer_name' => 'string',
        'short_description' => 'string',
        'long_description' => 'string',
        'customer_service_url' => 'string',
        'customer_service_email' => 'string',
        'customer_service_phone_number' => 'string',
        'issuer_mobile_app' => 'object',
        'online_banking_login_url' => 'string',
        'terms_and_conditions_url' => 'string',
        'privacy_policy_url' => 'string',
        'issuer_product_config_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'brand_logo_asset_id' => null,
        'issuer_logo_asset_id' => null,
        'is_co_branded' => null,
        'co_brand_name' => null,
        'co_brand_logo_asset_id' => null,
        'card_background_combined_asset_id' => null,
        'card_background_asset_id' => null,
        'icon_asset_id' => null,
        'foreground_color' => 'Hexadecimal RGB color format (case-insensitive).',
        'issuer_name' => null,
        'short_description' => null,
        'long_description' => null,
        'customer_service_url' => null,
        'customer_service_email' => null,
        'customer_service_phone_number' => null,
        'issuer_mobile_app' => null,
        'online_banking_login_url' => null,
        'terms_and_conditions_url' => null,
        'privacy_policy_url' => null,
        'issuer_product_config_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand_logo_asset_id' => 'brandLogoAssetId',
        'issuer_logo_asset_id' => 'issuerLogoAssetId',
        'is_co_branded' => 'isCoBranded',
        'co_brand_name' => 'coBrandName',
        'co_brand_logo_asset_id' => 'coBrandLogoAssetId',
        'card_background_combined_asset_id' => 'cardBackgroundCombinedAssetId',
        'card_background_asset_id' => 'cardBackgroundAssetId',
        'icon_asset_id' => 'iconAssetId',
        'foreground_color' => 'foregroundColor',
        'issuer_name' => 'issuerName',
        'short_description' => 'shortDescription',
        'long_description' => 'longDescription',
        'customer_service_url' => 'customerServiceUrl',
        'customer_service_email' => 'customerServiceEmail',
        'customer_service_phone_number' => 'customerServicePhoneNumber',
        'issuer_mobile_app' => 'issuerMobileApp',
        'online_banking_login_url' => 'onlineBankingLoginUrl',
        'terms_and_conditions_url' => 'termsAndConditionsUrl',
        'privacy_policy_url' => 'privacyPolicyUrl',
        'issuer_product_config_code' => 'issuerProductConfigCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand_logo_asset_id' => 'setBrandLogoAssetId',
        'issuer_logo_asset_id' => 'setIssuerLogoAssetId',
        'is_co_branded' => 'setIsCoBranded',
        'co_brand_name' => 'setCoBrandName',
        'co_brand_logo_asset_id' => 'setCoBrandLogoAssetId',
        'card_background_combined_asset_id' => 'setCardBackgroundCombinedAssetId',
        'card_background_asset_id' => 'setCardBackgroundAssetId',
        'icon_asset_id' => 'setIconAssetId',
        'foreground_color' => 'setForegroundColor',
        'issuer_name' => 'setIssuerName',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'customer_service_url' => 'setCustomerServiceUrl',
        'customer_service_email' => 'setCustomerServiceEmail',
        'customer_service_phone_number' => 'setCustomerServicePhoneNumber',
        'issuer_mobile_app' => 'setIssuerMobileApp',
        'online_banking_login_url' => 'setOnlineBankingLoginUrl',
        'terms_and_conditions_url' => 'setTermsAndConditionsUrl',
        'privacy_policy_url' => 'setPrivacyPolicyUrl',
        'issuer_product_config_code' => 'setIssuerProductConfigCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand_logo_asset_id' => 'getBrandLogoAssetId',
        'issuer_logo_asset_id' => 'getIssuerLogoAssetId',
        'is_co_branded' => 'getIsCoBranded',
        'co_brand_name' => 'getCoBrandName',
        'co_brand_logo_asset_id' => 'getCoBrandLogoAssetId',
        'card_background_combined_asset_id' => 'getCardBackgroundCombinedAssetId',
        'card_background_asset_id' => 'getCardBackgroundAssetId',
        'icon_asset_id' => 'getIconAssetId',
        'foreground_color' => 'getForegroundColor',
        'issuer_name' => 'getIssuerName',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'customer_service_url' => 'getCustomerServiceUrl',
        'customer_service_email' => 'getCustomerServiceEmail',
        'customer_service_phone_number' => 'getCustomerServicePhoneNumber',
        'issuer_mobile_app' => 'getIssuerMobileApp',
        'online_banking_login_url' => 'getOnlineBankingLoginUrl',
        'terms_and_conditions_url' => 'getTermsAndConditionsUrl',
        'privacy_policy_url' => 'getPrivacyPolicyUrl',
        'issuer_product_config_code' => 'getIssuerProductConfigCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['brand_logo_asset_id'] = $data['brand_logo_asset_id'] ?? null;
        $this->container['issuer_logo_asset_id'] = $data['issuer_logo_asset_id'] ?? null;
        $this->container['is_co_branded'] = $data['is_co_branded'] ?? null;
        $this->container['co_brand_name'] = $data['co_brand_name'] ?? null;
        $this->container['co_brand_logo_asset_id'] = $data['co_brand_logo_asset_id'] ?? null;
        $this->container['card_background_combined_asset_id'] = $data['card_background_combined_asset_id'] ?? null;
        $this->container['card_background_asset_id'] = $data['card_background_asset_id'] ?? null;
        $this->container['icon_asset_id'] = $data['icon_asset_id'] ?? null;
        $this->container['foreground_color'] = $data['foreground_color'] ?? null;
        $this->container['issuer_name'] = $data['issuer_name'] ?? null;
        $this->container['short_description'] = $data['short_description'] ?? null;
        $this->container['long_description'] = $data['long_description'] ?? null;
        $this->container['customer_service_url'] = $data['customer_service_url'] ?? null;
        $this->container['customer_service_email'] = $data['customer_service_email'] ?? null;
        $this->container['customer_service_phone_number'] = $data['customer_service_phone_number'] ?? null;
        $this->container['issuer_mobile_app'] = $data['issuer_mobile_app'] ?? null;
        $this->container['online_banking_login_url'] = $data['online_banking_login_url'] ?? null;
        $this->container['terms_and_conditions_url'] = $data['terms_and_conditions_url'] ?? null;
        $this->container['privacy_policy_url'] = $data['privacy_policy_url'] ?? null;
        $this->container['issuer_product_config_code'] = $data['issuer_product_config_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['brand_logo_asset_id'] === null) {
            $invalidProperties[] = "'brand_logo_asset_id' can't be null";
        }
        if ((mb_strlen($this->container['brand_logo_asset_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'brand_logo_asset_id', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['issuer_logo_asset_id'] === null) {
            $invalidProperties[] = "'issuer_logo_asset_id' can't be null";
        }
        if ((mb_strlen($this->container['issuer_logo_asset_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'issuer_logo_asset_id', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['is_co_branded'] === null) {
            $invalidProperties[] = "'is_co_branded' can't be null";
        }
        if (!is_null($this->container['co_brand_name']) && (mb_strlen($this->container['co_brand_name']) > 128)) {
            $invalidProperties[] = "invalid value for 'co_brand_name', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['co_brand_logo_asset_id']) && (mb_strlen($this->container['co_brand_logo_asset_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'co_brand_logo_asset_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['card_background_combined_asset_id']) && (mb_strlen($this->container['card_background_combined_asset_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'card_background_combined_asset_id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['card_background_asset_id']) && (mb_strlen($this->container['card_background_asset_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'card_background_asset_id', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['icon_asset_id'] === null) {
            $invalidProperties[] = "'icon_asset_id' can't be null";
        }
        if ((mb_strlen($this->container['icon_asset_id']) > 64)) {
            $invalidProperties[] = "invalid value for 'icon_asset_id', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['foreground_color'] === null) {
            $invalidProperties[] = "'foreground_color' can't be null";
        }
        if ((mb_strlen($this->container['foreground_color']) > 6)) {
            $invalidProperties[] = "invalid value for 'foreground_color', the character length must be smaller than or equal to 6.";
        }

        if ($this->container['issuer_name'] === null) {
            $invalidProperties[] = "'issuer_name' can't be null";
        }
        if ((mb_strlen($this->container['issuer_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'issuer_name', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['short_description'] === null) {
            $invalidProperties[] = "'short_description' can't be null";
        }
        if ((mb_strlen($this->container['short_description']) > 128)) {
            $invalidProperties[] = "invalid value for 'short_description', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['long_description']) && (mb_strlen($this->container['long_description']) > 256)) {
            $invalidProperties[] = "invalid value for 'long_description', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['customer_service_url']) && (mb_strlen($this->container['customer_service_url']) > 128)) {
            $invalidProperties[] = "invalid value for 'customer_service_url', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['customer_service_email']) && (mb_strlen($this->container['customer_service_email']) > 64)) {
            $invalidProperties[] = "invalid value for 'customer_service_email', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['customer_service_phone_number']) && (mb_strlen($this->container['customer_service_phone_number']) > 64)) {
            $invalidProperties[] = "invalid value for 'customer_service_phone_number', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['online_banking_login_url']) && (mb_strlen($this->container['online_banking_login_url']) > 128)) {
            $invalidProperties[] = "invalid value for 'online_banking_login_url', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['terms_and_conditions_url']) && (mb_strlen($this->container['terms_and_conditions_url']) > 128)) {
            $invalidProperties[] = "invalid value for 'terms_and_conditions_url', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['privacy_policy_url']) && (mb_strlen($this->container['privacy_policy_url']) > 128)) {
            $invalidProperties[] = "invalid value for 'privacy_policy_url', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['issuer_product_config_code']) && (mb_strlen($this->container['issuer_product_config_code']) > 128)) {
            $invalidProperties[] = "invalid value for 'issuer_product_config_code', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand_logo_asset_id
     *
     * @return string
     */
    public function getBrandLogoAssetId()
    {
        return $this->container['brand_logo_asset_id'];
    }

    /**
     * Sets brand_logo_asset_id
     *
     * @param string $brand_logo_asset_id The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object
     *
     * @return self
     */
    public function setBrandLogoAssetId($brand_logo_asset_id)
    {
        if ((mb_strlen($brand_logo_asset_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $brand_logo_asset_id when calling ProductConfig., must be smaller than or equal to 64.');
        }

        $this->container['brand_logo_asset_id'] = $brand_logo_asset_id;

        return $this;
    }

    /**
     * Gets issuer_logo_asset_id
     *
     * @return string
     */
    public function getIssuerLogoAssetId()
    {
        return $this->container['issuer_logo_asset_id'];
    }

    /**
     * Sets issuer_logo_asset_id
     *
     * @param string $issuer_logo_asset_id The logo of the issuing bank. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object
     *
     * @return self
     */
    public function setIssuerLogoAssetId($issuer_logo_asset_id)
    {
        if ((mb_strlen($issuer_logo_asset_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $issuer_logo_asset_id when calling ProductConfig., must be smaller than or equal to 64.');
        }

        $this->container['issuer_logo_asset_id'] = $issuer_logo_asset_id;

        return $this;
    }

    /**
     * Gets is_co_branded
     *
     * @return bool
     */
    public function getIsCoBranded()
    {
        return $this->container['is_co_branded'];
    }

    /**
     * Sets is_co_branded
     *
     * @param bool $is_co_branded Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object
     *
     * @return self
     */
    public function setIsCoBranded($is_co_branded)
    {
        $this->container['is_co_branded'] = $is_co_branded;

        return $this;
    }

    /**
     * Gets co_brand_name
     *
     * @return string|null
     */
    public function getCoBrandName()
    {
        return $this->container['co_brand_name'];
    }

    /**
     * Sets co_brand_name
     *
     * @param string|null $co_brand_name Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise. **Conditional: Conditionally required if isCoBranded = \"true\". Not present otherwise**
     *
     * @return self
     */
    public function setCoBrandName($co_brand_name)
    {
        if (!is_null($co_brand_name) && (mb_strlen($co_brand_name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $co_brand_name when calling ProductConfig., must be smaller than or equal to 128.');
        }

        $this->container['co_brand_name'] = $co_brand_name;

        return $this;
    }

    /**
     * Gets co_brand_logo_asset_id
     *
     * @return string|null
     */
    public function getCoBrandLogoAssetId()
    {
        return $this->container['co_brand_logo_asset_id'];
    }

    /**
     * Sets co_brand_logo_asset_id
     *
     * @param string|null $co_brand_logo_asset_id The co-brand logo (if any) for this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset.
     *
     * @return self
     */
    public function setCoBrandLogoAssetId($co_brand_logo_asset_id)
    {
        if (!is_null($co_brand_logo_asset_id) && (mb_strlen($co_brand_logo_asset_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $co_brand_logo_asset_id when calling ProductConfig., must be smaller than or equal to 64.');
        }

        $this->container['co_brand_logo_asset_id'] = $co_brand_logo_asset_id;

        return $this;
    }

    /**
     * Gets card_background_combined_asset_id
     *
     * @return string|null
     */
    public function getCardBackgroundCombinedAssetId()
    {
        return $this->container['card_background_combined_asset_id'];
    }

    /**
     * Sets card_background_combined_asset_id
     *
     * @param string|null $card_background_combined_asset_id The card image used to represent the digital card in the wallet. This ?combined? option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided**
     *
     * @return self
     */
    public function setCardBackgroundCombinedAssetId($card_background_combined_asset_id)
    {
        if (!is_null($card_background_combined_asset_id) && (mb_strlen($card_background_combined_asset_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $card_background_combined_asset_id when calling ProductConfig., must be smaller than or equal to 64.');
        }

        $this->container['card_background_combined_asset_id'] = $card_background_combined_asset_id;

        return $this;
    }

    /**
     * Gets card_background_asset_id
     *
     * @return string|null
     */
    public function getCardBackgroundAssetId()
    {
        return $this->container['card_background_asset_id'];
    }

    /**
     * Sets card_background_asset_id
     *
     * @param string|null $card_background_asset_id The card image used to represent the digital card in the wallet. This ?non-combined? option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided**
     *
     * @return self
     */
    public function setCardBackgroundAssetId($card_background_asset_id)
    {
        if (!is_null($card_background_asset_id) && (mb_strlen($card_background_asset_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $card_background_asset_id when calling ProductConfig., must be smaller than or equal to 64.');
        }

        $this->container['card_background_asset_id'] = $card_background_asset_id;

        return $this;
    }

    /**
     * Gets icon_asset_id
     *
     * @return string
     */
    public function getIconAssetId()
    {
        return $this->container['icon_asset_id'];
    }

    /**
     * Sets icon_asset_id
     *
     * @param string $icon_asset_id The icon representing the primary brand(s) associated with this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object
     *
     * @return self
     */
    public function setIconAssetId($icon_asset_id)
    {
        if ((mb_strlen($icon_asset_id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $icon_asset_id when calling ProductConfig., must be smaller than or equal to 64.');
        }

        $this->container['icon_asset_id'] = $icon_asset_id;

        return $this;
    }

    /**
     * Gets foreground_color
     *
     * @return string
     */
    public function getForegroundColor()
    {
        return $this->container['foreground_color'];
    }

    /**
     * Sets foreground_color
     *
     * @param string $foreground_color Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object
     *
     * @return self
     */
    public function setForegroundColor($foreground_color)
    {
        if ((mb_strlen($foreground_color) > 6)) {
            throw new \InvalidArgumentException('invalid length for $foreground_color when calling ProductConfig., must be smaller than or equal to 6.');
        }

        $this->container['foreground_color'] = $foreground_color;

        return $this;
    }

    /**
     * Gets issuer_name
     *
     * @return string
     */
    public function getIssuerName()
    {
        return $this->container['issuer_name'];
    }

    /**
     * Sets issuer_name
     *
     * @param string $issuer_name Name of the issuing bank. Always returned in Product Configuration object
     *
     * @return self
     */
    public function setIssuerName($issuer_name)
    {
        if ((mb_strlen($issuer_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $issuer_name when calling ProductConfig., must be smaller than or equal to 64.');
        }

        $this->container['issuer_name'] = $issuer_name;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description A short description for this product. Always returned in Product Configuration object
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if ((mb_strlen($short_description) > 128)) {
            throw new \InvalidArgumentException('invalid length for $short_description when calling ProductConfig., must be smaller than or equal to 128.');
        }

        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string|null
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     *
     * @param string|null $long_description A long description for this product.
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {
        if (!is_null($long_description) && (mb_strlen($long_description) > 256)) {
            throw new \InvalidArgumentException('invalid length for $long_description when calling ProductConfig., must be smaller than or equal to 256.');
        }

        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets customer_service_url
     *
     * @return string|null
     */
    public function getCustomerServiceUrl()
    {
        return $this->container['customer_service_url'];
    }

    /**
     * Sets customer_service_url
     *
     * @param string|null $customer_service_url Customer service website of the issuing bank.
     *
     * @return self
     */
    public function setCustomerServiceUrl($customer_service_url)
    {
        if (!is_null($customer_service_url) && (mb_strlen($customer_service_url) > 128)) {
            throw new \InvalidArgumentException('invalid length for $customer_service_url when calling ProductConfig., must be smaller than or equal to 128.');
        }

        $this->container['customer_service_url'] = $customer_service_url;

        return $this;
    }

    /**
     * Gets customer_service_email
     *
     * @return string|null
     */
    public function getCustomerServiceEmail()
    {
        return $this->container['customer_service_email'];
    }

    /**
     * Sets customer_service_email
     *
     * @param string|null $customer_service_email Customer service email address of the issuing bank.
     *
     * @return self
     */
    public function setCustomerServiceEmail($customer_service_email)
    {
        if (!is_null($customer_service_email) && (mb_strlen($customer_service_email) > 64)) {
            throw new \InvalidArgumentException('invalid length for $customer_service_email when calling ProductConfig., must be smaller than or equal to 64.');
        }

        $this->container['customer_service_email'] = $customer_service_email;

        return $this;
    }

    /**
     * Gets customer_service_phone_number
     *
     * @return string|null
     */
    public function getCustomerServicePhoneNumber()
    {
        return $this->container['customer_service_phone_number'];
    }

    /**
     * Sets customer_service_phone_number
     *
     * @param string|null $customer_service_phone_number Customer service phone number of the issuing bank.
     *
     * @return self
     */
    public function setCustomerServicePhoneNumber($customer_service_phone_number)
    {
        if (!is_null($customer_service_phone_number) && (mb_strlen($customer_service_phone_number) > 64)) {
            throw new \InvalidArgumentException('invalid length for $customer_service_phone_number when calling ProductConfig., must be smaller than or equal to 64.');
        }

        $this->container['customer_service_phone_number'] = $customer_service_phone_number;

        return $this;
    }

    /**
     * Gets issuer_mobile_app
     *
     * @return object|null
     */
    public function getIssuerMobileApp()
    {
        return $this->container['issuer_mobile_app'];
    }

    /**
     * Sets issuer_mobile_app
     *
     * @param object|null $issuer_mobile_app Contains one or more mobile app details that may be used to deep link from the Mobile Payment App to the issuer mobile app.
     *
     * @return self
     */
    public function setIssuerMobileApp($issuer_mobile_app)
    {


        $this->container['issuer_mobile_app'] = $issuer_mobile_app;

        return $this;
    }

    /**
     * Gets online_banking_login_url
     *
     * @return string|null
     */
    public function getOnlineBankingLoginUrl()
    {
        return $this->container['online_banking_login_url'];
    }

    /**
     * Sets online_banking_login_url
     *
     * @param string|null $online_banking_login_url Logon URL for the issuing bank?s online banking website.
     *
     * @return self
     */
    public function setOnlineBankingLoginUrl($online_banking_login_url)
    {
        if (!is_null($online_banking_login_url) && (mb_strlen($online_banking_login_url) > 128)) {
            throw new \InvalidArgumentException('invalid length for $online_banking_login_url when calling ProductConfig., must be smaller than or equal to 128.');
        }

        $this->container['online_banking_login_url'] = $online_banking_login_url;

        return $this;
    }

    /**
     * Gets terms_and_conditions_url
     *
     * @return string|null
     */
    public function getTermsAndConditionsUrl()
    {
        return $this->container['terms_and_conditions_url'];
    }

    /**
     * Sets terms_and_conditions_url
     *
     * @param string|null $terms_and_conditions_url URL linking to the issuing bank?s terms and conditions for this product.
     *
     * @return self
     */
    public function setTermsAndConditionsUrl($terms_and_conditions_url)
    {
        if (!is_null($terms_and_conditions_url) && (mb_strlen($terms_and_conditions_url) > 128)) {
            throw new \InvalidArgumentException('invalid length for $terms_and_conditions_url when calling ProductConfig., must be smaller than or equal to 128.');
        }

        $this->container['terms_and_conditions_url'] = $terms_and_conditions_url;

        return $this;
    }

    /**
     * Gets privacy_policy_url
     *
     * @return string|null
     */
    public function getPrivacyPolicyUrl()
    {
        return $this->container['privacy_policy_url'];
    }

    /**
     * Sets privacy_policy_url
     *
     * @param string|null $privacy_policy_url URL linking to the issuing bank?s privacy policy for this product.
     *
     * @return self
     */
    public function setPrivacyPolicyUrl($privacy_policy_url)
    {
        if (!is_null($privacy_policy_url) && (mb_strlen($privacy_policy_url) > 128)) {
            throw new \InvalidArgumentException('invalid length for $privacy_policy_url when calling ProductConfig., must be smaller than or equal to 128.');
        }

        $this->container['privacy_policy_url'] = $privacy_policy_url;

        return $this;
    }

    /**
     * Gets issuer_product_config_code
     *
     * @return string|null
     */
    public function getIssuerProductConfigCode()
    {
        return $this->container['issuer_product_config_code'];
    }

    /**
     * Sets issuer_product_config_code
     *
     * @param string|null $issuer_product_config_code Freeform identifier for this product configuration as assigned by the issuer.
     *
     * @return self
     */
    public function setIssuerProductConfigCode($issuer_product_config_code)
    {
        if (!is_null($issuer_product_config_code) && (mb_strlen($issuer_product_config_code) > 128)) {
            throw new \InvalidArgumentException('invalid length for $issuer_product_config_code when calling ProductConfig., must be smaller than or equal to 128.');
        }

        $this->container['issuer_product_config_code'] = $issuer_product_config_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


