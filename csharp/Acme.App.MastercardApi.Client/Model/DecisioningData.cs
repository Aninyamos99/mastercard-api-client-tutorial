/*
 * MDES Digital Enablement API
 *
 * These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Acme.App.MastercardApi.Client.Client.OpenAPIDateConverter;

namespace Acme.App.MastercardApi.Client.Model
{
    /// <summary>
    /// DecisioningData
    /// </summary>
    [DataContract(Name = "DecisioningData")]
    public partial class DecisioningData : IEquatable<DecisioningData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DecisioningData" /> class.
        /// </summary>
        /// <param name="recommendation">**(OPTIONAL)** Digitization decision recommended by the Token Requestor. Must be either APPROVED (Recommend a decision of Approved), DECLINED (Recommend a decision of Decline). .</param>
        /// <param name="recommendationAlgorithmVersion">**(OPTIONAL)** Version of the algorithm used by the Token Requestor to determine its recommendation. Must be a value of \&quot;01\&quot;. Other values may be supported in the future. .</param>
        /// <param name="deviceScore">**(OPTIONAL)** Score assigned by the Token Requestor for the target device being provisioned. Must be a value from 1 to 5. .</param>
        /// <param name="accountScore">**(OPTIONAL)** Score assigned by the Token Requestor for the consumer account or relationship. Must be a value from 1 to 5. .</param>
        /// <param name="recommendationReasons">**(OPTIONAL)** Code indicating the reasons the Token Requestor is suggesting the digitization decision.  See table here - https://developer.mastercard.com/mdes-digital-enablement/documentation/code-and-formats/#recommendation-reason-codes .</param>
        /// <param name="deviceCurrentLocation">**(OPTIONAL)** Latitude and longitude in the format \&quot;(sign) latitude, (sign) longitude\&quot; with a precision of 2 decimal places.  Ex - \&quot;38.63, -90.25\&quot;  Latitude is between -90 and 90.  Longitude between -180 and 180. Relates to the target device being provisioned. If there is no target device, then this should be the current consumer location, if available. .</param>
        /// <param name="deviceIpAddress">**(OPTIONAL)** The IP address of the device through which the device reaches the internet. This may be a temporary or permanent IP address assigned to a home router, or the IP address of a gateway through which the device connects to a network. IPv4 address format of 4 octets separated by \&quot;.\&quot; Ex - 127.0.0.1 Relates to the target device being provisioned. If there is no target device, then this should be the current consumer IP address, if available. .</param>
        /// <param name="mobileNumberSuffix">**(OPTIONAL)** The last few digits (typically four) of the consumer&#39;s mobile phone number as available on file or on the consumer&#39;s current device, which may or may not be the mobile number of the target device being provisioned. .</param>
        /// <param name="accountIdHash">**(OPTIONAL)** SHA-256 hash of the Cardholder?s account ID with the Token Requestor. Typically expected to be an email address. .</param>
        public DecisioningData(string recommendation = default(string), string recommendationAlgorithmVersion = default(string), string deviceScore = default(string), string accountScore = default(string), List<string> recommendationReasons = default(List<string>), string deviceCurrentLocation = default(string), string deviceIpAddress = default(string), string mobileNumberSuffix = default(string), string accountIdHash = default(string))
        {
            this.Recommendation = recommendation;
            this.RecommendationAlgorithmVersion = recommendationAlgorithmVersion;
            this.DeviceScore = deviceScore;
            this.AccountScore = accountScore;
            this.RecommendationReasons = recommendationReasons;
            this.DeviceCurrentLocation = deviceCurrentLocation;
            this.DeviceIpAddress = deviceIpAddress;
            this.MobileNumberSuffix = mobileNumberSuffix;
            this.AccountIdHash = accountIdHash;
        }

        /// <summary>
        /// **(OPTIONAL)** Digitization decision recommended by the Token Requestor. Must be either APPROVED (Recommend a decision of Approved), DECLINED (Recommend a decision of Decline). 
        /// </summary>
        /// <value>**(OPTIONAL)** Digitization decision recommended by the Token Requestor. Must be either APPROVED (Recommend a decision of Approved), DECLINED (Recommend a decision of Decline). </value>
        [DataMember(Name = "recommendation", EmitDefaultValue = false)]
        public string Recommendation { get; set; }

        /// <summary>
        /// **(OPTIONAL)** Version of the algorithm used by the Token Requestor to determine its recommendation. Must be a value of \&quot;01\&quot;. Other values may be supported in the future. 
        /// </summary>
        /// <value>**(OPTIONAL)** Version of the algorithm used by the Token Requestor to determine its recommendation. Must be a value of \&quot;01\&quot;. Other values may be supported in the future. </value>
        [DataMember(Name = "recommendationAlgorithmVersion", EmitDefaultValue = false)]
        public string RecommendationAlgorithmVersion { get; set; }

        /// <summary>
        /// **(OPTIONAL)** Score assigned by the Token Requestor for the target device being provisioned. Must be a value from 1 to 5. 
        /// </summary>
        /// <value>**(OPTIONAL)** Score assigned by the Token Requestor for the target device being provisioned. Must be a value from 1 to 5. </value>
        [DataMember(Name = "deviceScore", EmitDefaultValue = false)]
        public string DeviceScore { get; set; }

        /// <summary>
        /// **(OPTIONAL)** Score assigned by the Token Requestor for the consumer account or relationship. Must be a value from 1 to 5. 
        /// </summary>
        /// <value>**(OPTIONAL)** Score assigned by the Token Requestor for the consumer account or relationship. Must be a value from 1 to 5. </value>
        [DataMember(Name = "accountScore", EmitDefaultValue = false)]
        public string AccountScore { get; set; }

        /// <summary>
        /// **(OPTIONAL)** Code indicating the reasons the Token Requestor is suggesting the digitization decision.  See table here - https://developer.mastercard.com/mdes-digital-enablement/documentation/code-and-formats/#recommendation-reason-codes 
        /// </summary>
        /// <value>**(OPTIONAL)** Code indicating the reasons the Token Requestor is suggesting the digitization decision.  See table here - https://developer.mastercard.com/mdes-digital-enablement/documentation/code-and-formats/#recommendation-reason-codes </value>
        [DataMember(Name = "recommendationReasons", EmitDefaultValue = false)]
        public List<string> RecommendationReasons { get; set; }

        /// <summary>
        /// **(OPTIONAL)** Latitude and longitude in the format \&quot;(sign) latitude, (sign) longitude\&quot; with a precision of 2 decimal places.  Ex - \&quot;38.63, -90.25\&quot;  Latitude is between -90 and 90.  Longitude between -180 and 180. Relates to the target device being provisioned. If there is no target device, then this should be the current consumer location, if available. 
        /// </summary>
        /// <value>**(OPTIONAL)** Latitude and longitude in the format \&quot;(sign) latitude, (sign) longitude\&quot; with a precision of 2 decimal places.  Ex - \&quot;38.63, -90.25\&quot;  Latitude is between -90 and 90.  Longitude between -180 and 180. Relates to the target device being provisioned. If there is no target device, then this should be the current consumer location, if available. </value>
        [DataMember(Name = "deviceCurrentLocation", EmitDefaultValue = false)]
        public string DeviceCurrentLocation { get; set; }

        /// <summary>
        /// **(OPTIONAL)** The IP address of the device through which the device reaches the internet. This may be a temporary or permanent IP address assigned to a home router, or the IP address of a gateway through which the device connects to a network. IPv4 address format of 4 octets separated by \&quot;.\&quot; Ex - 127.0.0.1 Relates to the target device being provisioned. If there is no target device, then this should be the current consumer IP address, if available. 
        /// </summary>
        /// <value>**(OPTIONAL)** The IP address of the device through which the device reaches the internet. This may be a temporary or permanent IP address assigned to a home router, or the IP address of a gateway through which the device connects to a network. IPv4 address format of 4 octets separated by \&quot;.\&quot; Ex - 127.0.0.1 Relates to the target device being provisioned. If there is no target device, then this should be the current consumer IP address, if available. </value>
        [DataMember(Name = "deviceIpAddress", EmitDefaultValue = false)]
        public string DeviceIpAddress { get; set; }

        /// <summary>
        /// **(OPTIONAL)** The last few digits (typically four) of the consumer&#39;s mobile phone number as available on file or on the consumer&#39;s current device, which may or may not be the mobile number of the target device being provisioned. 
        /// </summary>
        /// <value>**(OPTIONAL)** The last few digits (typically four) of the consumer&#39;s mobile phone number as available on file or on the consumer&#39;s current device, which may or may not be the mobile number of the target device being provisioned. </value>
        [DataMember(Name = "mobileNumberSuffix", EmitDefaultValue = false)]
        public string MobileNumberSuffix { get; set; }

        /// <summary>
        /// **(OPTIONAL)** SHA-256 hash of the Cardholder?s account ID with the Token Requestor. Typically expected to be an email address. 
        /// </summary>
        /// <value>**(OPTIONAL)** SHA-256 hash of the Cardholder?s account ID with the Token Requestor. Typically expected to be an email address. </value>
        [DataMember(Name = "accountIdHash", EmitDefaultValue = false)]
        public string AccountIdHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DecisioningData {\n");
            sb.Append("  Recommendation: ").Append(Recommendation).Append("\n");
            sb.Append("  RecommendationAlgorithmVersion: ").Append(RecommendationAlgorithmVersion).Append("\n");
            sb.Append("  DeviceScore: ").Append(DeviceScore).Append("\n");
            sb.Append("  AccountScore: ").Append(AccountScore).Append("\n");
            sb.Append("  RecommendationReasons: ").Append(RecommendationReasons).Append("\n");
            sb.Append("  DeviceCurrentLocation: ").Append(DeviceCurrentLocation).Append("\n");
            sb.Append("  DeviceIpAddress: ").Append(DeviceIpAddress).Append("\n");
            sb.Append("  MobileNumberSuffix: ").Append(MobileNumberSuffix).Append("\n");
            sb.Append("  AccountIdHash: ").Append(AccountIdHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DecisioningData);
        }

        /// <summary>
        /// Returns true if DecisioningData instances are equal
        /// </summary>
        /// <param name="input">Instance of DecisioningData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DecisioningData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Recommendation == input.Recommendation ||
                    (this.Recommendation != null &&
                    this.Recommendation.Equals(input.Recommendation))
                ) && 
                (
                    this.RecommendationAlgorithmVersion == input.RecommendationAlgorithmVersion ||
                    (this.RecommendationAlgorithmVersion != null &&
                    this.RecommendationAlgorithmVersion.Equals(input.RecommendationAlgorithmVersion))
                ) && 
                (
                    this.DeviceScore == input.DeviceScore ||
                    (this.DeviceScore != null &&
                    this.DeviceScore.Equals(input.DeviceScore))
                ) && 
                (
                    this.AccountScore == input.AccountScore ||
                    (this.AccountScore != null &&
                    this.AccountScore.Equals(input.AccountScore))
                ) && 
                (
                    this.RecommendationReasons == input.RecommendationReasons ||
                    this.RecommendationReasons != null &&
                    input.RecommendationReasons != null &&
                    this.RecommendationReasons.SequenceEqual(input.RecommendationReasons)
                ) && 
                (
                    this.DeviceCurrentLocation == input.DeviceCurrentLocation ||
                    (this.DeviceCurrentLocation != null &&
                    this.DeviceCurrentLocation.Equals(input.DeviceCurrentLocation))
                ) && 
                (
                    this.DeviceIpAddress == input.DeviceIpAddress ||
                    (this.DeviceIpAddress != null &&
                    this.DeviceIpAddress.Equals(input.DeviceIpAddress))
                ) && 
                (
                    this.MobileNumberSuffix == input.MobileNumberSuffix ||
                    (this.MobileNumberSuffix != null &&
                    this.MobileNumberSuffix.Equals(input.MobileNumberSuffix))
                ) && 
                (
                    this.AccountIdHash == input.AccountIdHash ||
                    (this.AccountIdHash != null &&
                    this.AccountIdHash.Equals(input.AccountIdHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Recommendation != null)
                    hashCode = hashCode * 59 + this.Recommendation.GetHashCode();
                if (this.RecommendationAlgorithmVersion != null)
                    hashCode = hashCode * 59 + this.RecommendationAlgorithmVersion.GetHashCode();
                if (this.DeviceScore != null)
                    hashCode = hashCode * 59 + this.DeviceScore.GetHashCode();
                if (this.AccountScore != null)
                    hashCode = hashCode * 59 + this.AccountScore.GetHashCode();
                if (this.RecommendationReasons != null)
                    hashCode = hashCode * 59 + this.RecommendationReasons.GetHashCode();
                if (this.DeviceCurrentLocation != null)
                    hashCode = hashCode * 59 + this.DeviceCurrentLocation.GetHashCode();
                if (this.DeviceIpAddress != null)
                    hashCode = hashCode * 59 + this.DeviceIpAddress.GetHashCode();
                if (this.MobileNumberSuffix != null)
                    hashCode = hashCode * 59 + this.MobileNumberSuffix.GetHashCode();
                if (this.AccountIdHash != null)
                    hashCode = hashCode * 59 + this.AccountIdHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Recommendation (string) maxLength
            if(this.Recommendation != null && this.Recommendation.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Recommendation, length must be less than 64.", new [] { "Recommendation" });
            }

            // RecommendationAlgorithmVersion (string) maxLength
            if(this.RecommendationAlgorithmVersion != null && this.RecommendationAlgorithmVersion.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecommendationAlgorithmVersion, length must be less than 16.", new [] { "RecommendationAlgorithmVersion" });
            }

            // DeviceCurrentLocation (string) maxLength
            if(this.DeviceCurrentLocation != null && this.DeviceCurrentLocation.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceCurrentLocation, length must be less than 14.", new [] { "DeviceCurrentLocation" });
            }

            // DeviceIpAddress (string) maxLength
            if(this.DeviceIpAddress != null && this.DeviceIpAddress.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeviceIpAddress, length must be less than 15.", new [] { "DeviceIpAddress" });
            }

            // MobileNumberSuffix (string) maxLength
            if(this.MobileNumberSuffix != null && this.MobileNumberSuffix.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileNumberSuffix, length must be less than 32.", new [] { "MobileNumberSuffix" });
            }

            // AccountIdHash (string) maxLength
            if(this.AccountIdHash != null && this.AccountIdHash.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountIdHash, length must be less than 64.", new [] { "AccountIdHash" });
            }

            yield break;
        }
    }

}
