# coding: utf-8

"""
    MDES for Merchants

    The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously.    # noqa: E501

    The version of the OpenAPI document: 1.2.7
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import os
import json

import openapi_client
from openapi_client.api.tokenize_api import TokenizeApi
from openapi_client.rest import ApiException

from oauth1.signer_interceptor import add_signer_layer
from oauth1.signer_interceptor import get_signing_layer

from client_encryption.field_level_encryption_config import FieldLevelEncryptionConfig
from client_encryption.api_encryption import add_encryption_layer
from openapi_client.api_client import ApiClient

FLE_CONFIG_PATH = "resources/fle_config.json"
BASE_PATH = "https://sandbox.api.mastercard.com/mdes"
P12 = '' # TODO
KEY_PASSWORD = '' # TODO
CONSUMER_KEY = '' # TODO

class TestTokenizeApi(unittest.TestCase):

    def setUp(self):
        c = openapi_client.Configuration()
        c.host = BASE_PATH
        self.cli = openapi_client.ApiClient(c)
        ## Add OAuth1.0a interceptor
        add_signer_layer(self.cli, P12, KEY_PASSWORD, CONSUMER_KEY)
        ## Add Field Level Encryption interceptor
        config_file = os.path.join(os.path.dirname(__file__), FLE_CONFIG_PATH)
        add_encryption_layer(self.cli, config_file)


    def test_create_tokenize(self):
        """TokenizeApi create_tokenize unit test"""
        api = openapi_client.api.tokenize_api.TokenizeApi(self.cli)
        res = api.create_tokenize(tokenize_request_schema=self.create_body())
        # print(res.__dict__)
        assert(res)
        self.assertEqual(json.loads(res.data)['decision'], 'APPROVED')


    def create_body(self):
            return {
                "consumerLanguage": "en",
                "fundingAccountInfo": {
                    "encryptedPayload": {
                        "encryptedData": {
                            "accountHolderData": {
                                "accountHolderAddress": {
                                    "city": "St. Louis",
                                    "country": "USA",
                                    "countrySubdivision": "MO",
                                    "line1": "100 1st Street",
                                    "line2": "Apt. 4B",
                                    "postalCode": "61000"
                                },
                                "accountHolderName": "John Doe"
                            },
                            "cardAccountData": {
                                "accountNumber": "5123456789012345",
                                "expiryMonth": "09",
                                "expiryYear": "25",
                                "securityCode": "123"
                            },
                            "source": "ACCOUNT_ON_FILE"
                        }
                    }
                },
                "requestId": "123456",
                "responseHost": "site1.your-server.com",
                "taskId": "123456",
                "tokenRequestorId": "98765432101",
                "tokenType": "CLOUD",
                "tokenizationAuthenticationValue": "RHVtbXkgYmFzZSA2NCBkYXRhIC0gdGhpcyBpcyBub3QgYSByZWFsIFRBViBleGFtcGxl"
            }



if __name__ == '__main__':
    unittest.main()
