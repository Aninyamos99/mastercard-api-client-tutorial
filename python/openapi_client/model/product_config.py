"""
    MDES Digital Enablement API

    These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java)   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError



class ProductConfig(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('brand_logo_asset_id',): {
            'max_length': 64,
        },
        ('foreground_color',): {
            'max_length': 6,
        },
        ('issuer_name',): {
            'max_length': 64,
        },
        ('short_description',): {
            'max_length': 128,
        },
        ('issuer_logo_asset_id',): {
            'max_length': 64,
        },
        ('co_brand_name',): {
            'max_length': 128,
        },
        ('co_brand_logo_asset_id',): {
            'max_length': 64,
        },
        ('card_background_combined_asset_id',): {
            'max_length': 64,
        },
        ('card_background_asset_id',): {
            'max_length': 64,
        },
        ('icon_asset_id',): {
            'max_length': 64,
        },
        ('long_description',): {
            'max_length': 256,
        },
        ('customer_service_url',): {
            'max_length': 128,
        },
        ('customer_service_email',): {
            'max_length': 64,
        },
        ('customer_service_phone_number',): {
            'max_length': 64,
        },
        ('issuer_mobile_app',): {
        },
        ('online_banking_login_url',): {
            'max_length': 128,
        },
        ('terms_and_conditions_url',): {
            'max_length': 128,
        },
        ('privacy_policy_url',): {
            'max_length': 128,
        },
        ('issuer_product_config_code',): {
            'max_length': 128,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'brand_logo_asset_id': (str,),  # noqa: E501
            'foreground_color': (str,),  # noqa: E501
            'issuer_name': (str,),  # noqa: E501
            'short_description': (str,),  # noqa: E501
            'issuer_logo_asset_id': (str,),  # noqa: E501
            'is_co_branded': (bool,),  # noqa: E501
            'co_brand_name': (str,),  # noqa: E501
            'co_brand_logo_asset_id': (str,),  # noqa: E501
            'card_background_combined_asset_id': (str,),  # noqa: E501
            'card_background_asset_id': (str,),  # noqa: E501
            'icon_asset_id': (str,),  # noqa: E501
            'long_description': (str,),  # noqa: E501
            'customer_service_url': (str,),  # noqa: E501
            'customer_service_email': (str,),  # noqa: E501
            'customer_service_phone_number': (str,),  # noqa: E501
            'issuer_mobile_app': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'online_banking_login_url': (str,),  # noqa: E501
            'terms_and_conditions_url': (str,),  # noqa: E501
            'privacy_policy_url': (str,),  # noqa: E501
            'issuer_product_config_code': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'brand_logo_asset_id': 'brandLogoAssetId',  # noqa: E501
        'foreground_color': 'foregroundColor',  # noqa: E501
        'issuer_name': 'issuerName',  # noqa: E501
        'short_description': 'shortDescription',  # noqa: E501
        'issuer_logo_asset_id': 'issuerLogoAssetId',  # noqa: E501
        'is_co_branded': 'isCoBranded',  # noqa: E501
        'co_brand_name': 'coBrandName',  # noqa: E501
        'co_brand_logo_asset_id': 'coBrandLogoAssetId',  # noqa: E501
        'card_background_combined_asset_id': 'cardBackgroundCombinedAssetId',  # noqa: E501
        'card_background_asset_id': 'cardBackgroundAssetId',  # noqa: E501
        'icon_asset_id': 'iconAssetId',  # noqa: E501
        'long_description': 'longDescription',  # noqa: E501
        'customer_service_url': 'customerServiceUrl',  # noqa: E501
        'customer_service_email': 'customerServiceEmail',  # noqa: E501
        'customer_service_phone_number': 'customerServicePhoneNumber',  # noqa: E501
        'issuer_mobile_app': 'issuerMobileApp',  # noqa: E501
        'online_banking_login_url': 'onlineBankingLoginUrl',  # noqa: E501
        'terms_and_conditions_url': 'termsAndConditionsUrl',  # noqa: E501
        'privacy_policy_url': 'privacyPolicyUrl',  # noqa: E501
        'issuer_product_config_code': 'issuerProductConfigCode',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, brand_logo_asset_id, foreground_color, issuer_name, short_description, *args, **kwargs):  # noqa: E501
        """ProductConfig - a model defined in OpenAPI

        Args:
            brand_logo_asset_id (str): The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object 
            foreground_color (str): Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object 
            issuer_name (str): Name of the issuing bank. Always returned in Product Configuration object 
            short_description (str): A short description for this product. Always returned in Product Configuration object 

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            issuer_logo_asset_id (str): The logo of the issuing bank. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object . [optional]  # noqa: E501
            is_co_branded (bool): Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object . [optional]  # noqa: E501
            co_brand_name (str): Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise. **Conditional: Conditionally required if isCoBranded = \"true\". Not present otherwise** . [optional]  # noqa: E501
            co_brand_logo_asset_id (str): The co-brand logo (if any) for this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. . [optional]  # noqa: E501
            card_background_combined_asset_id (str): The card image used to represent the digital card in the wallet. This ?combined? option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** . [optional]  # noqa: E501
            card_background_asset_id (str): The card image used to represent the digital card in the wallet. This ?non-combined? option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** . [optional]  # noqa: E501
            icon_asset_id (str): The icon representing the primary brand(s) associated with this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object . [optional]  # noqa: E501
            long_description (str): A long description for this product. . [optional]  # noqa: E501
            customer_service_url (str): Customer service website of the issuing bank. . [optional]  # noqa: E501
            customer_service_email (str): Customer service email address of the issuing bank. . [optional]  # noqa: E501
            customer_service_phone_number (str): Customer service phone number of the issuing bank. . [optional]  # noqa: E501
            issuer_mobile_app ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Contains one or more mobile app details that may be used to deep link from the Mobile Payment App to the issuer mobile app. . [optional]  # noqa: E501
            online_banking_login_url (str): Logon URL for the issuing bank?s online banking website. . [optional]  # noqa: E501
            terms_and_conditions_url (str): URL linking to the issuing bank?s terms and conditions for this product. . [optional]  # noqa: E501
            privacy_policy_url (str): URL linking to the issuing bank?s privacy policy for this product. . [optional]  # noqa: E501
            issuer_product_config_code (str): Freeform identifier for this product configuration as assigned by the issuer. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.brand_logo_asset_id = brand_logo_asset_id
        self.foreground_color = foreground_color
        self.issuer_name = issuer_name
        self.short_description = short_description
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, brand_logo_asset_id, foreground_color, issuer_name, short_description, *args, **kwargs):  # noqa: E501
        """ProductConfig - a model defined in OpenAPI

        Args:
            brand_logo_asset_id (str): The MasterCard or Maestro brand logo associated with this card. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object 
            foreground_color (str): Foreground color, used to overlay text on top of the card image. Always returned in Product Configuration object 
            issuer_name (str): Name of the issuing bank. Always returned in Product Configuration object 
            short_description (str): A short description for this product. Always returned in Product Configuration object 

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            issuer_logo_asset_id (str): The logo of the issuing bank. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object . [optional]  # noqa: E501
            is_co_branded (bool): Whether the product is co-branded. Must be either true (this is a co-branded product) or false (this is not a co-branded product). Always returned in Product Configuration object . [optional]  # noqa: E501
            co_brand_name (str): Textual name of the co-brand partner. Required if CoBranded is true, not present otherwise. **Conditional: Conditionally required if isCoBranded = \"true\". Not present otherwise** . [optional]  # noqa: E501
            co_brand_logo_asset_id (str): The co-brand logo (if any) for this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. . [optional]  # noqa: E501
            card_background_combined_asset_id (str): The card image used to represent the digital card in the wallet. This ?combined? option contains the MasterCard, bank and any co- brand logos.  Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** . [optional]  # noqa: E501
            card_background_asset_id (str): The card image used to represent the digital card in the wallet. This ?non-combined? option does not contain the MasterCard, bank, or co-brand logos. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. **Conditional: either CardBackgroundCombined or CardBackground will be provided** . [optional]  # noqa: E501
            icon_asset_id (str): The icon representing the primary brand(s) associated with this product. Provided as an Asset ID ? use the Get Asset API to retrieve the actual asset. Always returned in Product Configuration object . [optional]  # noqa: E501
            long_description (str): A long description for this product. . [optional]  # noqa: E501
            customer_service_url (str): Customer service website of the issuing bank. . [optional]  # noqa: E501
            customer_service_email (str): Customer service email address of the issuing bank. . [optional]  # noqa: E501
            customer_service_phone_number (str): Customer service phone number of the issuing bank. . [optional]  # noqa: E501
            issuer_mobile_app ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Contains one or more mobile app details that may be used to deep link from the Mobile Payment App to the issuer mobile app. . [optional]  # noqa: E501
            online_banking_login_url (str): Logon URL for the issuing bank?s online banking website. . [optional]  # noqa: E501
            terms_and_conditions_url (str): URL linking to the issuing bank?s terms and conditions for this product. . [optional]  # noqa: E501
            privacy_policy_url (str): URL linking to the issuing bank?s privacy policy for this product. . [optional]  # noqa: E501
            issuer_product_config_code (str): Freeform identifier for this product configuration as assigned by the issuer. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.brand_logo_asset_id = brand_logo_asset_id
        self.foreground_color = foreground_color
        self.issuer_name = issuer_name
        self.short_description = short_description
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
