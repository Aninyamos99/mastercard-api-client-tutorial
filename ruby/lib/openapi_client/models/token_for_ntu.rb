=begin
#MDES Digital Enablement API

#These APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br><br> **Authentication** <br><br> Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br><br> 1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br><br> **Encryption** <br><br> All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br><br> **Additional Encryption of Sensitive Data** <br><br> In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 

The version of the OpenAPI document: 1.3.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class TokenForNTU
    # The unique reference allocated to the Token which is always present even if an error occurs. <br> maxLength: 64 
    attr_accessor :token_unique_reference

    # Identifies the Token Requestor. <br> minLength: 11 maxLength: 11 
    attr_accessor :token_requestor_id

    # The current status of Token. Must be either: * 'INACTIVE' (Token has not yet been activated) * 'ACTIVE' (Token is active and ready to transact) * 'SUSPENDED' (Token is suspended and unable to transact) * 'DEACTIVATED' (Token has been permanently deactivated).<br> maxLength: 32 
    attr_accessor :status

    # An optional Reason Code provided by the Issuer to explain why the token status has changed. Not present if the Issuer has not supplied a reason code. Note: Recommended that Partners be resilient to new values as new reason codes may be added in the future without notice. * 'DEVICE_LOST' - Cardholder confirmed token device lost. * 'DEVICE_STOLEN' - Cardholder confirmed token device stolen. * 'SUSPECTED_FRAUD' -  Issuer or cardholder reported fraudulent token transactions. * 'ACCOUNT_CLOSED' - Account closed. * 'NOT_FRAUD' - Issuer or cardholder confirmed no fraudulent token transactions. * 'DEVICE_FOUND' - Cardholder reported token device found or not stolen. * 'REDIGITIZATION_COMPLETE' - Token has been re-digitized successfully with either the expiry date extended or both expiry and token number changed. * 'OTHER' -  Other. <br> maxLength: 32 
    attr_accessor :event_reason_code

    # (CONDITIONAL only supplied if status is SUSPENDED) Who or what caused the Token to be suspended One or more values of:   * ISSUER - Suspended by the Issuer.   * TOKEN_REQUESTOR - Suspended by the Token Requestor   * MOBILE_PIN_LOCKED - Suspended due to the Mobile PIN being locked   * CARDHOLDER - Suspended by the Cardholder <br> 
    attr_accessor :suspended_by

    # The date and time the token status was last updated. Expressed in ISO 8601 extended format as one of the following:   * YYYY-MM-DDThh:mm:ss[.sss]Z   * YYYY-MM-DDThh:mm:ss[.sss]Â±hh:mm   * Where [.sss] is optional and can be 1 to 3 digits. <br> 
    attr_accessor :status_timestamp

    attr_accessor :product_config

    attr_accessor :token_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'token_unique_reference' => :'tokenUniqueReference',
        :'token_requestor_id' => :'tokenRequestorId',
        :'status' => :'status',
        :'event_reason_code' => :'eventReasonCode',
        :'suspended_by' => :'suspendedBy',
        :'status_timestamp' => :'statusTimestamp',
        :'product_config' => :'productConfig',
        :'token_info' => :'tokenInfo'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'token_unique_reference' => :'String',
        :'token_requestor_id' => :'String',
        :'status' => :'String',
        :'event_reason_code' => :'String',
        :'suspended_by' => :'Array<String>',
        :'status_timestamp' => :'String',
        :'product_config' => :'ProductConfig',
        :'token_info' => :'TokenInfoForNTUAndGetToken'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TokenForNTU` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TokenForNTU`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'token_unique_reference')
        self.token_unique_reference = attributes[:'token_unique_reference']
      end

      if attributes.key?(:'token_requestor_id')
        self.token_requestor_id = attributes[:'token_requestor_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'event_reason_code')
        self.event_reason_code = attributes[:'event_reason_code']
      end

      if attributes.key?(:'suspended_by')
        if (value = attributes[:'suspended_by']).is_a?(Array)
          self.suspended_by = value
        end
      end

      if attributes.key?(:'status_timestamp')
        self.status_timestamp = attributes[:'status_timestamp']
      end

      if attributes.key?(:'product_config')
        self.product_config = attributes[:'product_config']
      end

      if attributes.key?(:'token_info')
        self.token_info = attributes[:'token_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@status_timestamp.nil? && @status_timestamp.to_s.length > 29
        invalid_properties.push('invalid value for "status_timestamp", the character length must be smaller than or equal to 29.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@status_timestamp.nil? && @status_timestamp.to_s.length > 29
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] status_timestamp Value to be assigned
    def status_timestamp=(status_timestamp)
      if !status_timestamp.nil? && status_timestamp.to_s.length > 29
        fail ArgumentError, 'invalid value for "status_timestamp", the character length must be smaller than or equal to 29.'
      end

      @status_timestamp = status_timestamp
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          token_unique_reference == o.token_unique_reference &&
          token_requestor_id == o.token_requestor_id &&
          status == o.status &&
          event_reason_code == o.event_reason_code &&
          suspended_by == o.suspended_by &&
          status_timestamp == o.status_timestamp &&
          product_config == o.product_config &&
          token_info == o.token_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [token_unique_reference, token_requestor_id, status, event_reason_code, suspended_by, status_timestamp, product_config, token_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
